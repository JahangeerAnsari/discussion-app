// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}
model Profile{
id String @id @default(uuid())
userId String @unique
name String
// it will provide us more text characters
imageUrl String @db.Text
email String @db.Text
servers Server[]
members Member[]
channels Channel[]
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

}
model Server{
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @unique
  members Member[]
  channels Channel[]
  // relation b/w server and profile are
  profileId String
  profile Profile @relation(fields: [profileId], references: [id],onDelete: Cascade)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
@@index([profileId])
}

// we have different type of members and its roles
enum MemberRole {
ADMIN
MODERATOR
GUEST
}

model Member {
  id String @id @default(uuid())
  role MemberRole @default(GUEST)
  // ever member having server
  serverId String 
  server Server @relation(fields: [serverId], references:[id],onDelete: Cascade)
  // relationship b/w member and profile 
  profileId String 
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([profileId])
  @@index([serverId]) 
}
enum ChannelType {
  TEXT 
  AUDIO 
  VIDEO 
}
model Channel{
  id String @id @default(uuid())
  name String 
  type ChannelType @default(TEXT)
  // connect channel  with profile
 
  profileId String
  profile Profile @relation(fields: [profileId], references:[id], onDelete: Cascade)
// also connect channel with server
serverId String

server Server @relation(fields: [serverId], references:[id], onDelete: Cascade)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
@@index([profileId])
@@index([serverId])
}


